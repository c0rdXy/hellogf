// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package hello

import (
	"context"
	"fmt"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gtime"
	hello2 "hellogf/api/hello"
	"hellogf/internal/dao"
	"hellogf/internal/model/do"
	"hellogf/internal/model/entity"
)

type hello struct{}

func NewHello() *hello {
	return &hello{}
}

func (c *hello) SayHello(req *ghttp.Request) {
	req.Response.Writefln("你好GoFrame!")
}

func (c *hello) Params(ctx context.Context, req *hello2.ParamsReq) (res *hello2.ParamsRes, err error) {
	r := g.RequestFromCtx(ctx)
	/*	name := r.GetQuery("name", "李四")
		r.Response.Writeln(name.String() + "你好!")
		data := r.GetQueryMap()
		r.Response.Writeln(data)
		data := r.GetQueryMap(g.Map{"name": "李四", "age": 20})
		r.Response.Writeln(data)

		data := r.GetForm("username")

		data := r.GetFormMap()
		r.Response.Writeln(data)

		type user struct {
			UserName string
			Age      int
			Password string
		}

		var u user
		err = r.ParseForm(&u)

		name := r.GetRouter("name")

		name := r.GetRouterMap()

		data := r.Parse(&u)
		if err == nil {
			r.Response.Writeln(data)
		}*/

	r.Response.Writeln(req)

	return
}

func (c *hello) Response(ctx context.Context, req *hello2.ParamsReq) (res *hello2.ParamsRes, err error) {
	//r := g.RequestFromCtx(ctx)

	//r.Response.Writef("<h1>hello %s, age %d</h1>", req.UserName, req.Age)
	//r.Response.WriteExit("<h2 style='color: red'>hello</h2>")
	//r.Response.Writeln("<h2 style='color: red'>hello</h2>")
	//r.Response.Writeln("<h2 style='color: red'>hello</h2>")

	//r.Response.WriteJson(req)

	res = &hello2.ParamsRes{
		UserName: "www",
		Password: "123456",
		Age:      18,
	}

	err = gerror.New("服务器开小差了")

	return
}

func (c *hello) Db(req *ghttp.Request) {
	//md := g.Model("book")
	//book, err := md.One()
	//books, err := md.All()
	//books, err := md.Fields("id, name, price").All()
	//books, err := md.FieldsEx("id").All()
	//books, err := md.Array("name")
	min, err := g.Model("book").Min("price")
	max, err := g.Model("book").Max("price")
	avg, err := g.Model("book").Avg("price")
	count, err := g.Model("book").Count()
	if err == nil {
		req.Response.Writeln(g.Map{
			"min":   min,
			"max":   max,
			"avg":   avg,
			"count": count,
		})
	}
}

func (c *hello) Db1(req *ghttp.Request) {
	md := g.Model("book")
	//books, err := md.Where("id", 2).All()
	//books, err := md.WhereGTE("id", 2).WhereLTE("id", 4).All()
	//books, err := md.WhereIn("id", g.Array{3, 4, 5}).All()
	//books, err := md.WhereIn("id", g.Array{3, 4, 5}).WhereOrLike("name", "%数据%").All()
	//books, err := md.Order("price", "ASC").Order("id", "DESC").All()
	//books, err := md.Group("name").All()
	//books, err := md.Limit(3, 4).All()
	books, err := md.Page(2, 3).All()
	if err == nil {
		req.Response.Writeln(books)
	}
}

func (c *hello) Db2(req *ghttp.Request) {
	type Book struct {
		BookId  uint        `json:"id" orm:"id"`
		Name    string      `json:"name"`
		Author  string      `json:"author"`
		Price   float64     `json:"price"`
		PubTime *gtime.Time `orm:"publish_time" json:"pubTime"`
	}
	//var book *Book
	var book []Book

	md := g.Model("book")
	//err := md.Scan(&book)

	//err := md.Where("id", 10).Scan(&book)
	err := md.Scan(&book)

	if err == nil {
		if book != nil {
			req.Response.Writeln(book)
		}
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (c *hello) Db3(req *ghttp.Request) {
	type Book struct {
		BookId  uint        `json:"id" orm:"id"`
		Name    string      `json:"name"`
		Author  string      `json:"author"`
		Price   float64     `json:"price"`
		PubTime *gtime.Time `json:"pubTime" orm:"publish_time"`
	}

	//data := g.Map{
	//	//"name":         "Go语言编程",
	//	//"author":       "张三",
	//	"price":        33.333,
	//	"publish_time": gtime.Now(),
	//}

	md := g.Model("book")

	//result, err := md.Data(data).Insert()
	//result, err := md.Insert(data)
	//result, err := md.Replace(data)
	//result, err := md.Save(data)
	//result, err := md.InsertAndGetId(data)

	//result, err := md.Where(g.Map{
	//	"author": "张三",
	//	"price":  33,
	//	//}).Data(data).Update()
	//}).Update(data)

	//result, err := md.WhereLT("id", 10).Increment("price", 10)
	//result, err = g.Model("book").WhereGT("id", 10).Decrement("price", 10)

	result, err := md.WhereGT("id", 9).Delete()

	if err == nil {
		req.Response.Writeln(result)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (c *hello) Db4(req *ghttp.Request) {
	type Book struct {
		BookId  uint        `json:"id" orm:"id"`
		Name    string      `json:"name"`
		Author  string      `json:"author"`
		Price   float64     `json:"price"`
		PubTime *gtime.Time `json:"pubTime" orm:"publish_time"`
	}

	data := g.Map{
		"name":         "Go语言编程",
		"author":       "张三",
		"price":        3233,
		"publish_time": gtime.Now(),
	}
	fmt.Println(data)

	md := g.Model("book")

	//result, err := md.Insert(data)
	//result, err := md.Where("id", 9).Update(data)
	//result, err := md.WhereGTE("id", 9).Delete()
	//result, err := md.All()
	result, err := md.Unscoped().All()

	if err == nil {
		req.Response.Writeln(result)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (c *hello) Db5(req *ghttp.Request) {
	type Book struct {
		BookId  uint        `json:"id" orm:"id"`
		Name    string      `json:"name"`
		Author  string      `json:"author"`
		Price   float64     `json:"price"`
		PubTime *gtime.Time `json:"pubTime" orm:"publish_time"`
	}

	data := g.Map{
		"name":         "Go语言编程",
		"author":       "张三",
		"price":        6666,
		"publish_time": gtime.Now(),
	}
	fmt.Println(data)

	g.DB().Transaction(context.TODO(), func(ctx context.Context, tx gdb.TX) error {
		md := tx.Model("book")
		result, err := md.Insert(data)
		if err == nil {
			req.Response.Writeln(result)
		} else {
			req.Response.Writeln(err.Error())
		}
		err = gerror.New("服务器开小差了")
		return err
	})

	//tx, err := g.DB().Begin(req.Context())
	//if err != nil {
	//	req.Response.Writeln(err.Error())
	//
	//}
	//
	//md := tx.Model("book")
	//
	//result, err := md.Insert(data)
	//
	//err = gerror.New("服务器开小差了")
	//
	//if err == nil {
	//	tx.Commit()
	//	req.Response.Writeln(result)
	//} else {
	//	tx.Rollback()
	//	req.Response.Writeln(err.Error())
	//}
}

func (c *hello) Db6(req *ghttp.Request) {
	type Book struct {
		BookId  uint        `json:"id" orm:"id"`
		Name    string      `json:"name"`
		Author  string      `json:"author"`
		Price   float64     `json:"price"`
		PubTime *gtime.Time `json:"pubTime" orm:"publish_time"`
	}

	//sql1 := "select * from book where id > ? and id < ?"
	sql2 := "INSERT INTO `book` (`name`, `author`, `price`) VALUES (?, ?, ?)"

	db := g.DB()
	//result, err := db.Query(req.Context(), sql1, g.Array{3, 7})
	result, err := db.Exec(req.Context(), sql2, g.Array{"Go语言从入门到精通", "Go语言研讨组", 99.98})

	if err == nil {
		req.Response.Writeln(result)
	} else {
		req.Response.Writeln(err.Error())
	}

}

func (h *hello) Db7(req *ghttp.Request) {
	md := dao.Book.Ctx(req.Context())

	md = md.WhereGT("id", 2)
	md = md.WhereLT("id", 7)

	result, err := md.All()

	if err == nil {
		req.Response.Writeln(result)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (h *hello) Db8(req *ghttp.Request) {
	md := dao.Book.Ctx(req.Context())

	book := do.Book{
		Price: 66.66,
	}

	//req.Response.WriteJsonExit(book)

	result, err := md.Where(do.Book{Id: 20}).OmitEmpty().Update(book)

	if err == nil {
		req.Response.Writeln(result)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (h *hello) Db9(req *ghttp.Request) {
	md := dao.Emp.Ctx(req.Context())

	var emps []entity.Emp

	err := md.With(entity.Dept{}, entity.Hobby{}).Scan(&emps)

	if err == nil {
		req.Response.Writeln(emps)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (h *hello) Db10(req *ghttp.Request) {
	md := dao.Dept.Ctx(req.Context())

	var emps []entity.Dept

	err := md.With(entity.Emp{}, entity.Hobby{}).Scan(&emps)

	if err == nil {
		req.Response.Writeln(emps)
	} else {
		req.Response.Writeln(err.Error())
	}
}

func (h *hello) Db11(req *ghttp.Request) {
	type MyDept struct {
		g.Meta `orm:"table:dept"`
		Id     uint   `json:"id"     ` // ID
		Name   string `json:"name"   ` // 部门名称
		Leader string `json:"leader" ` // 部门领导
		Phone  string `json:"phone"  ` // 联系电话
	}

	type MyEmp struct {
		g.Meta `orm:"table:emp"`
		Id     uint   `json:"id"      ` // ID
		DeptId uint   `json:"dept_id" ` // 所属部门
		Name   string `json:"name"    ` // 姓名
		Phone  string `json:"phone"   ` // 联系电话

		Dept *MyDept `orm:"with:id=dept_id" json:"dept"`
	}

	var emps []MyEmp

	err := dao.Emp.Ctx(req.Context()).With(MyDept{}).Scan(&emps)

	if err == nil {
		req.Response.Writeln(emps)
	} else {
		req.Response.Writeln(err.Error())
	}
}
